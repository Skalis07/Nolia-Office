---
---
<!-- Archivo: src/pages/index.astro -->
<!-- Página Astro que funciona en local y en GitHub Pages usando import.meta.env.BASE_URL -->
<!-- Mantuve TODOS tus comentarios y solo modifiqué rutas/pequeños detalles para compatibilidad -->

<head>
  <!-- Configuración básica de la página -->
  <meta charset="utf-8" /> <!-- Tipo de caracteres: UTF-8 permite tildes, ñ y símbolos -->
  <link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} /> <!-- Icono pequeño que se ve en la pestaña del navegador (BASE_URL) -->
  <meta name="viewport" content="width=device-width, initial-scale=1" /> <!-- Hace que la página se adapte a móviles <diseño responsivo> -->
  <meta name="generator" content={Astro.generator} /> <!-- Esto lo agrega Astro automáticamente, indica que se utiliza Astro y su versión-->
  <title>Para mi princesa &lt;3</title> <!-- Texto que se ve en la pestaña del navegador, &lt; es el símbolo "<" -->



<style>

  *, *::before, *::after { box-sizing: border-box; }

  .title-wrap{
    width:100%;
    max-width:1200px;
    overflow: visible;      /* no recortes arriba/abajo del título */
    padding-top: 4px;       /* colchón superior */
    position: relative;
    z-index: 10;
    transition: height 140ms ease-out;
    will-change: height;
  }
  #pageTitle{
    display:inline-block;
    white-space:nowrap;
    transform-origin: left top;
    line-height:1.15;
    font-size: clamp(14px, 4vw, 28px);
    transition: transform 140ms ease-out;
    will-change: transform;
  }

  /* ===== Página ===== */
  html, body{ height:100%; margin:0; overflow-x:hidden; }
  body{ text-align:center; background:#2a5b3d; }

  .page{
    background-image: var(--bg-url);
    background-repeat:repeat;
    background-position:0 0;
    background-size:auto;
    background-attachment:scroll;

    min-height:100vh;
    display:flex; flex-direction:column; align-items:center;
    gap:16px; padding:10px 10px 0; box-sizing:border-box; position:relative;
  }

  /* ===== Título ===== */
  h1{
    margin:0; color:#000; font-family:Arial, sans-serif;
    font-size:clamp(14px, 8vw, 28px);
    white-space:nowrap;
  }

  /* ===== Marco del GIF ===== */
  .img-redondeada{
    max-width:1200px; width:100%;
    border-radius:20px; border:5px solid #fff;
    box-shadow:0 4px 15px rgba(0,0,0,.3);
    overflow:hidden; position:relative;
  }
  .img-redondeada img{
    display:block; width:100%; height:100%;
    object-fit:cover; object-position:center bottom;
    position:relative; z-index:1;
  }

  .badge-fecha {
    position: absolute;
    left: 0;
    bottom: 0;
    background: none;
    color: #fff;

    font-family: "Arial Rounded MT Bold", "Arial Rounded MT", Arial, sans-serif;
    font-weight: 900; /* lo más grueso posible */
    font-size: clamp(18px, 5vw, 26px); /* más grande que antes */
    line-height: 1.2;
    letter-spacing: 0.1px;

    padding: 8px 10px;
    border-top-right-radius: 10px;
    text-align: left;
    white-space: pre-line;
    user-select: none;

    z-index: 2;

    /* Suavizado */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }






  /* ===== iframes ocultos pero reproducibles (visually-hidden) ===== */
  #yt-audio,
  #yt-rain{
    position: absolute !important;
    left: 0 !important;
    top: 0 !important;
    width: 1px !important;
    height: 1px !important;
    margin: -1px !important;
    padding: 0 !important;
    overflow: hidden !important;
    opacity: 0 !important;
    pointer-events: none !important;
    border: 0 !important;
    /* oculto visualmente sin sacarlo del flujo ni mandarlo offscreen */
    clip: rect(0 0 0 0) !important;
    clip-path: inset(50%) !important;
  }
  #yt-audio iframe,
  #yt-rain iframe{
    width: 1px !important;
    height: 1px !important;
    border: 0 !important;
    display: block !important;
  }


  /* ===== Barra música ===== */
  .barra-musica{
    --turquesa:#5aa7a6; --borde-claro:rgba(255,255,255,.75);
    max-width:100%; width:100%; margin-inline:auto;
    background:var(--turquesa);
    border:4px solid var(--borde-claro);
    border-radius:9999px; padding:10px 16px;
    display:flex; align-items:center; justify-content:center;
    flex-wrap:nowrap; box-sizing:border-box; gap:10px;
    box-shadow:0 4px 12px rgba(0,0,0,.25);
    position:relative; z-index:20; transition:opacity .2s, filter .2s;
  }
  .oscuro .barra-musica{ opacity:.85; filter:saturate(.75) brightness(.85); }

  .icon-btn{
    width:44px; height:44px; flex:0 0 44px;
    border-radius:50%; border:3px solid #fff; background:transparent; color:#fff;
    display:grid; place-items:center; cursor:pointer;
    transition:background-color .2s, transform .05s, opacity .2s;
  }
  .icon-btn:hover{ background-color:rgba(255,255,255,.12); }
  .icon-btn:active{ transform:scale(.98); }
  .icon-btn svg{ width:20px; height:20px; display:block; }
  .icon-btn.active{ background-color:rgba(255,255,255,.18); }

  /* ===== Slider volumen (MÚSICA) ===== */
  .volume-slider{
    -webkit-appearance:none; appearance:none;
    flex:1 1 160px;      /* se estira, pero puede encoger sin cortarse */
    min-width:0;         /* CLAVE para flexbox */
    max-width:320px;     /* en pantallas grandes se permite crecer */
    width:auto; height:6px; border-radius:999px;
    background:rgba(255,255,255,.65); outline:none; cursor:pointer;
  }
  .volume-slider::-webkit-slider-thumb{
    -webkit-appearance:none; appearance:none;
    width:16px; height:16px; border-radius:50%; background:#fff;
    border:2px solid var(--turquesa); box-shadow:0 1px 2px rgba(0,0,0,.25);
  }
  .volume-slider::-moz-range-thumb{
    width:16px; height:16px; border-radius:50%; background:#fff;
    border:2px solid var(--turquesa); box-shadow:0 1px 2px rgba(0,0,0,.25);
  }
  .volume-slider::-moz-range-track{ height:6px; border-radius:999px; background:rgba(255,255,255,.65); }

  /* ===== Tirita sol/luna ===== */
  @keyframes stretch{ 0%{transform:translateZ(0) scaleY(1)} 50%{transform:translateZ(0) scaleY(1.06)} 100%{transform:translateZ(0) scaleY(1)} }
  .right-handle{ --thumb:34px; --strip-h:220px; position:fixed; top:0; right:16px; z-index:30; pointer-events:none; display:flex; align-items:flex-start; justify-content:center; }
  .right-handle .track{
    position:relative; width:24px; height:var(--strip-h); background:#fff9e8; border-radius:0;
    margin-bottom:calc(var(--thumb)*.5);
    box-shadow:inset 0 2px 0 rgba(0,0,0,.08), 0 2px 8px rgba(0,0,0,.15);
    pointer-events:auto; transform-origin:top center; cursor:pointer;
    transition:box-shadow .18s, background .18s;
  }
  .right-handle .track:hover{ background:#fff4d1; box-shadow:inset 0 2px 0 rgba(0,0,0,.1), 0 3px 10px rgba(0,0,0,.2); }
  .right-handle .track.stretch{ animation:stretch 220ms ease-out; }
  .right-handle .thumb{
    position:absolute; left:50%; transform:translateX(-50%); width:var(--thumb); height:var(--thumb);
    border-radius:50%; border:3px solid #fff; display:grid; place-items:center;
    bottom:calc(-1 * var(--thumb) * .5); transition:background 160ms, color 160ms, box-shadow 160ms, transform 80ms;
    cursor:pointer; color:#6b4a00; background:#ffc400; box-shadow:0 3px 6px rgba(0,0,0,.25); pointer-events:auto;
  }
  .right-handle .thumb:hover{ transform:translateX(-50%) scale(1.03); }
  .right-handle .thumb svg{ width:18px; height:18px; display:block; }
  .right-handle.activo .thumb{ background:#2e2e2e; color:#fff; }

  /* ===== Oscurecido ===== */
  .dim-overlay{ position:fixed; inset:0; background:rgba(0,0,0,.45); opacity:0; visibility:hidden; transition:opacity 160ms, visibility 160ms; z-index:25; pointer-events:none; }
  .dim-overlay.activo{ opacity:1; visibility:visible; }

  /* ===== Frame: mismo ancho para GIF y barra ===== */
  .frame{ width:100%; max-width:1200px; margin-inline:auto; }
  .frame .img-redondeada, .frame .barra-musica{ width:100%; max-width:none; box-sizing:border-box; }

  /* --- separación entre GIF y barra (página y Notion) --- */
  .frame .barra-musica{
    margin-top: 12px;
  }
  html.embed-notion .barra-musica{
    margin-top: 12px !important;
  }

  /* ===== Ajustes móviles generales ===== */
  @media (max-width:520px){
    .barra-musica{ padding:8px 10px; gap:8px; }
    .icon-btn{ width:36px; height:36px; flex-basis:36px; }
    .volume-slider{ min-width:0; max-width:none; }
    .volume-slider::-webkit-slider-thumb{ width:12px; height:12px; }
    .volume-slider::-moz-range-thumb{ width:12px; height:12px; }
  }
  @media (max-width:380px){
    .page{ padding:8px 8px 0; }
    .right-handle{ right:8px; --strip-h:160px; }
    .icon-btn{ width:40px; height:40px; }
    .volume-slider::-webkit-slider-thumb{ width:14px; height:14px; }
    .volume-slider::-moz-range-thumb{ width:14px; height:14px; }
  }
  @media (max-width:320px){ .right-handle{ display:none; } }

  /* ===== Notion embed: limpio y sin cortes ===== */
  html.embed-notion, html.embed-notion body{ background:transparent!important; }
  html.embed-notion .page{ --bg-url:none!important; background:transparent!important; padding:0!important; }
  html.embed-notion .title-wrap{ display:none!important; }
  html.embed-notion .right-handle, html.embed-notion .dim-overlay{ display:none!important; }
  html.embed-notion .frame{ display:block!important; max-width:100%!important; min-width:0!important; }

  /* Sin bordes/sombras en Notion */
  html.embed-notion .img-redondeada{ border:0!important; box-shadow:none!important; border-radius:20px!important; }
  html.embed-notion .barra-musica{ box-shadow:none!important; border:0!important; }
  html.embed-notion .img-redondeada, html.embed-notion .icon-btn{ box-shadow:none!important; }

  /* Que la barra NO se corte (puede saltar a 2 filas) */
  html.embed-notion .barra-musica{
    flex-wrap:wrap!important;
    padding:8px 10px!important;
    gap:8px!important;
    min-width:0!important;
  }

  /* Orden y responsive de los controles dentro de Notion */
  html.embed-notion .volume-slider{
    order:2!important; flex:1 1 100%!important; width:100%!important;
    max-width:none!important; min-width:0!important; transform:none!important;
  }
  html.embed-notion #musicToggle,
  html.embed-notion #rainToggle,
  html.embed-notion #gifShuffle{ order:1!important; }



</style>

  






  <script is:inline>
    (function(){
      const qs = new URLSearchParams(location.search);
      const inIframe = (()=>{ try{ return window.self !== window.top }catch(_){ return true }})();
      const isNotion = qs.has('notion') || /notion\.so|notion\.site/i.test(document.referrer || '');
      if(inIframe && isNotion){
        document.documentElement.classList.add('embed-notion');
      }
    })();
  </script>







</head>

<!-- NOTA: En Astro, no añadimos <html> ni <body> explícitos. El contenido de la página va directo aquí. -->

<!-- NUEVO: wrapper que ordena todo en columna y evita micro-scroll al cargar
     (aquí movimos el padding superior que antes estaba en body) -->
  <div  class="page"  style={`--bg-url: url(${import.meta.env.BASE_URL}fondo.png)`}  data-lighton>  
  <!-- ===== Título principal ===== -->
  <div class="title-wrap">
    <h1 id="pageTitle">NOELIA ESTOY HACIENDO MI PÁGINA WEB QUE EMOCIÓN BUENO Y AHORA QUE HAGO</h1>
  </div>


  
  <!-- ===== CONTENEDOR del GIF con marco redondeado ===== -->

  <div class="frame">
    <!-- ===== CONTENEDOR del GIF con marco redondeado ===== -->
    <div class="img-redondeada" data-lighton>
      <img id="mainGif" src={`${import.meta.env.BASE_URL}1.gif`} alt="Gif en el centro">

      <div id="reloj" class="badge-fecha" aria-live="polite"></div>

      <div id="yt-audio" aria-hidden="true"><div id="ytplayerMusic"></div></div>
      <div id="yt-rain"  aria-hidden="true"><div id="ytplayerRain"></div></div>
    </div>

    <!-- ===== Barra de control ===== -->
    <div class="barra-musica" id="controlsBar" data-lighton>
      <button id="musicToggle" class="icon-btn" aria-label="Reproducir música">
        <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M8 5v14l11-7z"/></svg>
      </button>

      <input id="volumeMusic" class="volume-slider" type="range" min="0" max="100" value="100" aria-label="Volumen de música (0 a 100)" />

      <button id="rainToggle" class="icon-btn" aria-label="Activar lluvia" title="Lluvia">
        <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
          <path d="M19 18a4 4 0 0 0 0-8 5 5 0 0 0-9-2 4 4 0 0 0-2 7.5"></path>
        </svg>
      </button>


      <button id="gifShuffle" class="icon-btn" aria-label="Cambiar GIF" title="Cambiar GIF">
        <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
          <path d="M4 4h4l4 6-4 6H4l4-6-4-6zm10 0h6v2h-4v4h-2V4zm0 16v-6h2v4h4v2h-6z"/>
        </svg>
      </button>
    </div>
  </div>



</div> <!-- /.page -->

<!-- Tirita Sol/Luna -->
<div id="rightHandle" class="right-handle" aria-hidden="false">
  <div id="rightTrack" class="track" role="presentation" title="Click para atenuar/encender">
    <button id="modeThumb" class="thumb" aria-label="Cambiar modo (día/noche)" aria-pressed="false"></button> <!-- Botón redondo Sol/Luna -->
  </div>
</div>

<!-- Capa de oscurecido -->
<div id="dimOverlay" class="dim-overlay" aria-hidden="true"></div>

<!-- ===== Script: Fecha y Hora ===== -->
<script is:inline>
  (function() { /* IIFE para no ensuciar el scope global */
    const $reloj = document.getElementById('reloj');   // Busca el DIV donde pondremos fecha/hora
    if (!$reloj) return;                               // Si no existe, salimos sin error
    const locale = navigator.language || 'es-ES';      // Idioma del navegador (ej. 'es-CL')

    function actualizarReloj() {                       // Función que arma el texto
      const ahora = new Date();                        // Fecha/hora actual
      const fecha = ahora.toLocaleDateString(locale, { // “domingo, 10 de agosto de 2025”
        weekday: 'long', day: 'numeric', month: 'long', year: 'numeric'
      });
      const hora = ahora.toLocaleTimeString(locale, {  // “08:10 p. m.” o “20:10”
        hour: '2-digit', minute: '2-digit'
      });
      $reloj.textContent = `${fecha}\n${hora}`;        // 2 líneas (CSS tiene white-space: pre-line)
    }

    actualizarReloj();                                 // Pinta de inmediato
    setInterval(actualizarReloj, 1000 * 30);           // Actualiza cada 30s
  })();
</script>

<!-- ===== Script: API YouTube (Música + Lluvia) y lógica de UI ===== -->
<script is:inline>
  const DEFAULT_RAIN_VOL = 60; // el mismo 60% que usabas en el slider

  /* =========================
     ICONOS SVG EN STRINGS
     ========================= */
  const ICON_PLAY  = '<svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M8 5v14l11-7z"/></svg>'; // Botón Play
  const ICON_PAUSE = '<svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M6 5h4v14H6zM14 5h4v14h-4z"/></svg>'; // Botón Pause
  /* Nube (inactiva) */
  const ICON_CLOUD = `
    <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
      <path d="M19 18a4 4 0 0 0 0-8 5 5 0 0 0-9-2 4 4 0 0 0-2 7.5"/>
    </svg>`; // SVG de nube simple
  /* Nube con lluvia (activa) */
  const ICON_CLOUD_RAIN = `
    <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
      <path d="M19 18a4 4 0 0 0 0-8 5 5 0 0 0-9-2 4 4 0 0 0-2 7.5"/>
      <path d="M8 20l1-2M12 20l1-2M16 20l1-2" stroke="currentColor" stroke-width="2" stroke-linecap="round" fill="none"/>
    </svg>`; // SVG de nube con “gotas”

  /* =========================
     BASE_URL para recursos estáticos
     ========================= */
  /*const BASE = '${import.meta.env.BASE_URL}'; // Astro inserta el prefijo correcto ('' en local, '/Nolia-Office/' en Pages)

  /* =========================
     YOUTUBE API (audio oculto)
     ========================= */
  let playerMusic;          // Reproductor de YouTube para la música
  let playerRain;           // Reproductor de YouTube para la lluvia
  let isMusicPlaying = false; // Estado de reproducción de la música
  let isRainPlaying   = false; // Estado de reproducción de la lluvia

  // Referencias a controles
  let btnMusic, btnRain, volMusic, btnShuffle, gifImg; // Variables para guardar elementos del DOM

  // Inyectar API de YouTube (agrega <script> dinámicamente)
  const ytScript = document.createElement('script'); // Crea un elemento script
  ytScript.src = "https://www.youtube.com/iframe_api"; // URL oficial de la API IFrame
  document.head.appendChild(ytScript); // Lo añade al <head> para que cargue

  // La API llamará esto al estar lista (callback global requerido por YouTube)
  window.onYouTubeIframeAPIReady = function () {
    // Player de MÚSICA
    playerMusic = new YT.Player('ytplayerMusic', { // Crea el reproductor dentro del div con ese id
      videoId: '8kBlKM71pjc',                     // ID del video de música (cámbialo si quieres otra canción)
      playerVars: { autoplay: 0, controls: 0, rel: 0, playsinline: 1 }, // Configuración: sin controles visibles
      events: { onReady: onPlayersReady }         // Cuando esté listo, ejecuta onPlayersReady
    });
    // Player de LLUVIA
    playerRain = new YT.Player('ytplayerRain', {  // Crea el reproductor de lluvia
      videoId: 'q76bMs-NwRk',                     // ID del video de lluvia
      playerVars: { autoplay: 0, controls: 0, rel: 0, playsinline: 1, loop: 1, playlist: 'q76bMs-NwRk' }, // Loop infinito
      events: { onReady: onPlayersReady }         // Ejecuta onPlayersReady también cuando esté listo
    });
  };




    function onPlayersReady() {
    // 1) SIEMPRE aplica volúmenes cada vez que se ready-ea algún player
    try {
      const volEl = document.getElementById('volumeMusic');
      const volValue = volEl ? Number(volEl.value) : 100;
      if (playerMusic && typeof playerMusic.setVolume === 'function') {
        playerMusic.setVolume(volValue);
      }
    } catch (e) {}

    try {
      if (playerRain && typeof playerRain.setVolume === 'function') {
        playerRain.setVolume(DEFAULT_RAIN_VOL); // p.ej. 35
      }
    } catch (e) {}

    // 2) Solo haz el "wiring" de controles UNA VEZ
    if (typeof btnMusic !== 'undefined' && btnMusic) return;

    // Cachea referencias y eventos una sola vez
    btnMusic   = document.getElementById('musicToggle');
    btnRain    = document.getElementById('rainToggle');
    volMusic   = document.getElementById('volumeMusic');
    btnShuffle = document.getElementById('gifShuffle');
    gifImg     = document.getElementById('mainGif');

    /* ===== Eventos ===== */
    btnMusic.addEventListener('click', () => {
      if (!isMusicPlaying) {
        playerMusic.playVideo();
        btnMusic.innerHTML = ICON_PAUSE;
        btnMusic.setAttribute('aria-label','Pausar música');
        isMusicPlaying = true;
      } else {
        playerMusic.pauseVideo();
        btnMusic.innerHTML = ICON_PLAY;
        btnMusic.setAttribute('aria-label','Reproducir música');
        isMusicPlaying = false;
      }
    });

    volMusic.addEventListener('input', () => {
      if (playerMusic && typeof playerMusic.setVolume === 'function') {
        playerMusic.setVolume(Number(volMusic.value));
      }
    });

    btnRain.addEventListener('click', () => {
      if (!isRainPlaying) {
        playerRain.playVideo();
        btnRain.classList.add('active');
        btnRain.innerHTML = ICON_CLOUD_RAIN;
        btnRain.setAttribute('aria-label','Apagar lluvia');
        isRainPlaying = true;
      } else {
        playerRain.pauseVideo();
        btnRain.classList.remove('active');
        btnRain.innerHTML = ICON_CLOUD;
        btnRain.setAttribute('aria-label','Activar lluvia');
        isRainPlaying = false;
      }
    });

    // Mantén tus llamadas:
    lockAspectFrom(gifImg);
    setupGifRotator(btnShuffle, gifImg);
  }


    /* =========================
     MODO OSCURITO (tirita)
    ========================= */
    (function(){
      const handle   = document.getElementById('rightHandle'); // Contenedor fijo de la tirita
      const track    = document.getElementById('rightTrack');  // Riel clickeable
      const thumb    = document.getElementById('modeThumb');   // Bolita sol/luna
      const overlay  = document.getElementById('dimOverlay');  // Capa oscura
      const page     = document.querySelector('.page');        // Para “encender” al clicar (desactivado)
      const controls = document.getElementById('controlsBar'); // Barra de controles (no “enciende” ahora)
      if (!handle || !track || !thumb || !overlay) return;     // Si falta algo, no seguimos

      // Iconos Sol/Luna dentro de la bolita
      const ICON_SUN = '<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M6.76 4.84l-1.8-1.79L3.17 4.84l1.79 1.79 1.8-1.79zM1 13h3v-2H1v2zm10 10h2v-3h-2v3zm9-10v-2h-3v2h3zm-2.93 7.07l1.79 1.79 1.79-1.79-1.79-1.79-1.79 1.79zM12 6a6 6 0 100 12 6 6 0 000-12zm7.24-1.16l-1.8-1.79-1.79 1.79 1.79 1.79 1.8-1.79zM4.84 17.24l-1.79 1.79 1.79 1.79 1.79-1.79-1.79-1.79z"/></svg>'; // Sol
      const ICON_MOON = '<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"/></svg>'; // Luna

      // ===== Sonido del interruptor =====
      // BASE robusto que funciona en local, user site y project pages
      const BASE = (() => {
        // 1) intenta deducir desde el favicon (Astro lo resuelve bien en Pages)
        const icon = document.querySelector('link[rel="icon"]')?.href;
        if (icon) return new URL('.', icon).href;

        // 2) si no hay favicon, usa el src del GIF principal (ya resuelto con BASE_URL)
        const gif = document.getElementById('mainGif')?.src;
        if (gif) return new URL('.', gif).href;

        // 3) heurística por si acaso: primer segmento del path en Project Pages
        const parts = location.pathname.split('/').filter(Boolean);
        return parts.length ? `/${parts[0]}/` : '/';
      })();

      // Opcional: agrega ?v=1 para evitar caché dura de Pages al cambiar el archivo
      const SWITCH_URL = new URL('light_switch.mp3?v=1', BASE).href;

      const switchSfx  = new Audio(SWITCH_URL);
      switchSfx.preload = 'auto';
      switchSfx.volume  = 0.7;       // ajusta a gusto (0.0 - 1.0)
      switchSfx.playbackRate = 1.0;  // 1.0 normal


      function playSwitch() {
        try {
          // Reinicia para que suene completo en toques seguidos
          switchSfx.currentTime = 0;
          // Llamamos play() dentro del gesto de usuario → no debería bloquearse
          const p = switchSfx.play();
          if (p && typeof p.catch === 'function') p.catch(() => {});
        } catch (_) {}
      }

      let oscuro = false; // false = Día/Sol, true = Noche/Luna

      function aplicarEstado() {                             // Aplica clases y aspecto según 'oscuro'
        overlay.classList.toggle('activo', oscuro);          // Muestra/oculta oscurecido
        handle.classList.toggle('activo', oscuro);           // Cambia look de la bolita
        document.body.classList.toggle('oscuro', oscuro);    // Estilo de barra en modo oscuro
        thumb.setAttribute('aria-pressed', String(oscuro));  // Accesibilidad
        thumb.innerHTML = oscuro ? ICON_MOON : ICON_SUN;     // Icono
      }
      function estirarTirita() {                             // Efecto “estirarse” breve
        track.classList.add('stretch');
        setTimeout(()=>track.classList.remove('stretch'), 230);
      }
      function alternar() {                                  // Cambia de modo día/noche
        oscuro = !oscuro;
        aplicarEstado();
        estirarTirita();
        playSwitch();                                        // <<< SONIDO AQUÍ
      }

      // Click sobre el riel (toda la tirita)
      track.addEventListener('click', (e) => {
        if (e.target === thumb) return; // Si el objetivo fue la bolita, no duplicar acción
        alternar();
      });
      // Click en la bolita
      thumb.addEventListener('click', (e) => { e.stopPropagation(); alternar(); });

      // Clics en contenido ya no “encienden” en oscuro (requerimiento)
      document.addEventListener('click', (e) => {
        const target = e.target;
        const wantsLight = target && typeof target.closest === 'function'
          ? target.closest('[data-lighton]')
          : null;
        // if (wantsLight && oscuro) { oscuro = false; aplicarEstado(); } // desactivado
      });

      aplicarEstado(); // Estado inicial (día)
    })();


  /* =========================
     BLOQUEAR PROPORCIÓN SEGÚN EL PRIMER GIF
     - Lee el tamaño natural del <img> inicial (id="mainGif")
     - Fija aspect-ratio en el contenedor .img-redondeada (alto estable)
     - Hace que TODOS los GIFs siguientes se ajusten con object-fit: cover
       (para que rellenen aunque recorten un poquito si son muy verticales/horizontales)
     ========================= */
  function lockAspectFrom(imgEl) {
    if (!imgEl) return; // Guard clause: si no hay imagen, nada que hacer
    const container = imgEl.closest('.img-redondeada'); // Contenedor marco (borde redondeado)
    if (!container) return; // Si no encontramos el contenedor, salimos

    const apply = () => {
      const w = imgEl.naturalWidth;   // Ancho real del GIF cargado (sin escalar)
      const h = imgEl.naturalHeight;  // Alto real del GIF cargado (sin escalar)
      if (!w || !h) return;           // Si aún no están, salimos y no rompemos nada

      container.style.aspectRatio = `${w} / ${h}`; // NUEVO: fija relación de aspecto del marco
      imgEl.style.width  = '100%';                 // La imagen ocupa todo el ancho
      imgEl.style.height = '100%';                 // …y todo el alto del marco
      imgEl.style.objectFit = 'cover';             // *** CLAVE: rellena el contenedor ***
    };

    // Si ya está cargada, aplicamos altiro; si no, esperamos el evento load.
    if (imgEl.complete) apply();
    else imgEl.addEventListener('load', apply, { once: true }); // Una sola vez cuando cargue
  }

  /* =========================
     ROTADOR DE GIFs
     - Busca automáticamente /1.gif, /2.gif, … hasta MAX
     - Se queda con los que EXISTEN (onload) y rota en ciclo
     - Mantiene la proporción del marco (no hay saltos de tamaño)
     ========================= */
  function setupGifRotator(btn, imgEl) {
    if (!btn || !imgEl) return;              // Si falta botón o imagen, no seguimos

    const MAX_GIFS = 20;                  // súbelo si tienes más gifs
    const EXT = '.gif';                   // cambia si usas .GIF o .webp
    const baseHref = new URL(
      imgEl.getAttribute('src'),          // ej: "/Nolia-Office/1.gif" o "/1.gif"
      location.href
    ).href.replace(/[^/]+$/, '');         // queda con barra final, ej: "http://host/Nolia-Office/"

    const urls = [];
    let completados = 0;
    let actual = 0;

    for (let i = 1; i <= MAX_GIFS; i++) {
      const test = new Image();
      const url = baseHref + i + EXT;     // construye rutas correctas siempre
      test.onload  = () => { urls.push(url); checkDone(); };
      test.onerror = () => { checkDone(); };
      test.src = url;
    }

    function checkDone() {
      completados++;
      if (completados === MAX_GIFS) {
        if (urls.length === 0) { urls.push(baseHref + '1' + EXT); }
        urls.sort();

        const currentSrc = new URL(imgEl.getAttribute('src'), location.href).href; // normaliza a absoluta
        const found = urls.indexOf(currentSrc || '');
        actual = found >= 0 ? found : 0;

        btn.addEventListener('click', () => {
          actual = (actual + 1) % urls.length;
          imgEl.src = urls[actual];
          imgEl.style.width  = '100%';
          imgEl.style.height = '100%';
          imgEl.style.objectFit = 'cover';
        });
      }
    }
  }
  



  /* ===== Ajuste automático del título a una línea (versión suavizada) ===== */
  (() => {
    try {
      if (document.documentElement.classList.contains('embed-notion')) return;

      const wrap  = document.querySelector('.title-wrap');
      const title = document.getElementById('pageTitle');
      if (!wrap || !title) return;

      let rafId = 0, debounceTimer = 0;
      let lastAvail = NaN, lastScale = NaN, lastHeight = NaN;

      function computeAndApply(){
        rafId = 0;
        const avail = wrap.clientWidth || 0;
        const need  = title.scrollWidth || 1;

        if (isFinite(lastAvail) && Math.abs(avail - lastAvail) < 1) return;
        lastAvail = avail;

        const targetScale = Math.max(0.25, Math.min(1, avail / need));
        if (!isFinite(targetScale)) return;

        if (!isFinite(lastScale) || Math.abs(targetScale - lastScale) > 0.005) {
          title.style.transform = `scale(${targetScale})`;
          lastScale = targetScale;

          const h = title.getBoundingClientRect().height;
          if (!isFinite(lastHeight) || Math.abs(h - lastHeight) > 0.5) {
            wrap.style.height = h + 'px';
            lastHeight = h;
          }
        }
      }

      function schedule(){
        if (debounceTimer) clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
          if (rafId) return;
          rafId = requestAnimationFrame(computeAndApply);
        }, 40);
      }

      if (typeof ResizeObserver !== 'undefined') {
        const ro = new ResizeObserver(schedule);
        ro.observe(wrap);
      }
      window.addEventListener('resize', schedule, { passive: true });

      requestAnimationFrame(schedule);
    } catch (err) {
      console.error('Title fit error:', err);
    }
  })();






</script>